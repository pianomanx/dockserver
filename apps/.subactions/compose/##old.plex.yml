#!/bin/ansible-playbook
#
# Title:      Plex Subtask
# Author(s):  MrDoob
# GNU:        General Public License v3.0
################################################################################
---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: 'Set Known Facts'
      set_fact:
        app: 'plex'
    - name: 'Register Server IP'
      uri:
        url: http://ifconfig.me/ip
        return_content: yes
      register: ipaddress
    - name: 'Register Domain'
      shell: cat /etc/hosts | grep 127.0.0.1 | tail -n 1 | awk '{print $2}'
      register: domain
    - name: Check {{app}}-preferences.xml exists
      stat:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
      register: plex_prefs
    - name: 'secure Connections is missing'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences/@secureConnections
        count: yes
      register: secure_hits
      when:
        - plex_prefs.stat.exists
    - name: 'Add secureConnections if missing'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: secureConnections
        value: '1'
      when:
        - plex_prefs.stat.exists
        - secure_hits.count == 0
    - name: 'Read Preferences.xml'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        content: attribute
      register: plex_pref_content
      when: plex_prefs.stat.exists
    - name: 'custom Connections missing'
      set_fact:
        customConnections: 'http://{{ipaddress.content}}:32400, http://plex.{{domain.stdout}}:32400'
      when:
        - plex_prefs.stat.exists == False
    - name: 'Add Custom Connection Labels'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: customConnections
        value: 'http://{{ipaddress.content}}:32400, http://plex.{{domain.stdout}}:32400'
      when: plex_prefs.stat.exists
    - name: 'Edit Generate - Chapter -Thumb - Behavior to never'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: GenerateChapterThumbBehavior
        value: 'never'
      when: plex_prefs.stat.exists
    - name: 'Edit Loudness - Analysis - Behavior to never'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: LoudnessAnalysisBehavior
        value: 'never'
      when: plex_prefs.stat.exists
    - name: 'Edit Minutes - Allowed - Paused to max 10min'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: MinutesAllowedPaused
        value: '10'
      when: plex_prefs.stat.exists
    - name: 'Edit DLNA-Enabled to disable'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: DlnaEnabled
        value: 'p'
      when: plex_prefs.stat.exists
    - name: 'Edit DisableTLSv1_0'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: DisableTLSv1_0
        value: '1'
      when: plex_prefs.stat.exists
    - name: 'Edit TranscoderH264BackgroundPreset'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: TranscoderH264BackgroundPreset
        value: 'faster'
      when: plex_prefs.stat.exists
    - name: 'Edit ScannerLowPriority'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: ScannerLowPriority
        value: '1'
      when: plex_prefs.stat.exists
    - name: 'Edit ManualPortMappingMode'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: ManualPortMappingMode
        value: '1'
      when: plex_prefs.stat.exists
    - name: 'Edit DlnaReportTimeline'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: DlnaReportTimeline
        value: '0'
      when: plex_prefs.stat.exists
    - name: 'Edit TranscoderTempDirectory'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: TranscoderTempDirectory
        value: '/transcode'
      when: plex_prefs.stat.exists
    - name: 'Edit TranscoderThrottleBuffer'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: TranscoderThrottleBuffer
        value: '200'
      when: plex_prefs.stat.exists
    - name: 'Edit TranscodeCountLimit'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: TranscodeCountLimit
        value: '4'
      when: plex_prefs.stat.exists
    - name: 'Edit autoEmptyTrash'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: autoEmptyTrash
        value: '1'
      when: plex_prefs.stat.exists
    - name: 'Edit RelayEnabled'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: RelayEnabled
        value: '0'
      when: plex_prefs.stat.exists
    - name: 'Check /dev/dri exists'
      stat:
        path: '/dev/dri'
      register: dev_dri
    - name: 'Edit HardwareAcceleratedCodecs'
      xml:
        path: '/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Preferences.xml'
        xpath: /Preferences
        attribute: HardwareAcceleratedCodecs
        value: '1'
      when:
        - plex_prefs.stat.exists
        - dev_dri.stat.exists == True
    - name: "Install package for {{app}}-db Cache size Fix"
      apt:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
        - sqlite3
    - name: 'Get Current {{app}} DB Cache Size'
      shell: |
        sqlite3 "/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db" \
        "PRAGMA default_cache_size;"
      args:
        executable: /bin/bash
      register: current_db_cache_size
    - name: Set 'default_db_cache_size' variable
      set_fact:
        default_db_cache_size: '60000'
    - name: Check if 'plex.db_cache_size' was specified
      set_fact:
        db_cache_size_is_specified: "{{ true if not (
            (plex.db_cache_size is undefined)
            or
            (plex.db_cache_size is none)
            or
            (plex.db_cache_size | trim | length == 0)
          )
          else false }}"
    - name: 'Get Desired {{app}} DB Cache Size'
      set_fact:
        desired_db_cache_size: "{{ default_db_cache_size
          if ( (not db_cache_size_is_specified) or (plex.db_cache_size == 'default') )
          else ( (plex.db_cache_size) | regex_replace(',', '') | int ) }}"
    - name: 'Make {{app}} DB Edits'
      block:
      - name: 'Stop {{app}} Container'
        shell: 'docker stop {{app}}'
        when: ('plex_db_cache_size' in ansible_run_tags)
      - name: 'Display Desired Plex DB Cache Size'
        debug:
          msg: "Desired Plex DB Cache Size is '{{ desired_db_cache_size }}'"
      - name: "Set {{app}} DB Cache Size"
        shell: |
          sqlite3 "/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db" \
            "PRAGMA default_cache_size = '{{ desired_db_cache_size | int }}';"
        args:
          executable: /bin/bash
      - name: 'Get New {{app}} DB Cache Size'
        shell: |
          sqlite3 "/opt/appdata/plex/database/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db" \
            "PRAGMA default_cache_size;"
        args:
          executable: /bin/bash
        register: new_db_cache_size
      - name: 'Display New {{app}} DB Cache Size'
        debug:
          msg: "Plex DB cache size is now set to '{{ new_db_cache_size.stdout | int }}'."
      - name: 'Start {{app}} Container'
        shell: 'docker start {{app}}'
        when: ('plex_db_cache_size' in ansible_run_tags)